generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String     @id @default(uuid())
  firstName            String
  lastName             String
  profile              String?
  phone                String
  email                String     @unique
  password             String
  verified             Boolean    @default(false)
  balance              Float      @default(0)
  resetPasswordToken   String?
  resetPasswordExpires DateTime?
  visaCards            VisaCard[]
  products             Product[]
  services             Service[]
  articles             Article[]
  reviews              Review[]
  likedArticles        Article[]  @relation("UserLikedArticles")
  Order                Order[]
}

model Order {
  id         String   @id @default(uuid())
  status     String   @default("pending")
  quantity   Int
  totalPrice Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
}

model VisaCard {
  id         String @id @default(uuid())
  cardNumber String
  expiryDate String
  cvv        String
  user       User   @relation(fields: [userId], references: [id])
  userId     String
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String
  photos      String[]
  price       Float
  offerPrice  Float?
  quantity    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  Order       Order[]
}

model Article {
  id        String   @id @default(uuid())
  title     String
  content   String
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  likedBy   User[]   @relation("UserLikedArticles")
}

model Service {
  id          String   @id @default(uuid())
  name        String
  description String
  price       Float
  images      String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  reviews     Review[]
}

model Review {
  id        String   @id @default(uuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  service   Service  @relation(fields: [serviceId], references: [id])
  serviceId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}
